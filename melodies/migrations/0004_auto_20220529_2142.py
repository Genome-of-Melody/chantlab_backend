# Generated by Django 3.1.7 on 2022-05-29 21:42
"""
This migration adds century codes to chants according to their source IDs.
Reads the source.csv file from Cantus Corpus v0.2, but can be copied for
any CSV file that has 'id' and 'century_id' columns.
"""



from django.db import migrations

import csv
import os


def add_century_codes(apps, schema_editor):

    # Load sources CSV. Expected in melodies/static/
    sources_csv_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'static', 'source.csv')
    century_code_column_name = 'century_id'
    source_id_column_name = 'id'

    source_id_to_century_code_map = {}

    with open(sources_csv_file) as sourcesfile:
        column_names = []
        source_id_column_index = None
        century_code_column_index = None
        csv_reader = csv.reader(sourcesfile, delimiter=",")
        line_count = 0
        for row in csv_reader:
            if line_count == 0:
                column_names = row
                if source_id_column_name not in column_names:
                    raise ValueError('Column name {} required to use CSV file {}'
                                     'for adding century codes to chant data.'
                                     ''.format(source_id_column_name, sources_csv_file))
                source_id_column_index = column_names.index(source_id_column_name)
                if century_code_column_name not in column_names:
                    raise ValueError('Column name {} required to use CSV file {}'
                                     'for adding century codes to chant data.'
                                     ''.format(century_code_column_name, sources_csv_file))
                century_code_column_index = column_names.index(century_code_column_name)

                ## DEBUG
                # print('First line processed: found source and century columns: {}, {}'.format(source_id_column_index, century_code_column_index))
            else:
                source_id_to_century_code_map[row[source_id_column_index]] = row[century_code_column_index]
                # print('Added to source -- century code map: {} -> {}'.format(
                #     row[source_id_column_index], row[century_code_column_index]
                # ))
            line_count += 1


    Chant = apps.get_model('melodies', 'Chant')
    for i, chant in enumerate(Chant.objects.all()):
        source_id = chant.source_id
        if source_id in source_id_to_century_code_map:
            # print('{}: Would add to chant {} with source id {} century {}'
            #       ''.format(i, chant.id, source_id, source_id_to_century_code_map[source_id]))
            chant.century_code = source_id_to_century_code_map[source_id]
            chant.save()
        else:
            pass
            # print('{}: Chant source {} does not have century.'.format(i, source_id))

    # raise NotImplementedError()

def remove_century_codes(apps, schema_editor):
    Chant = apps.get_model('melodies', 'Chant')
    for chant in Chant.objects.all():
        chant.century_code = None
        chant.save()



class Migration(migrations.Migration):

    dependencies = [
        ('melodies', '0003_auto_20220529_2135'),
    ]

    operations = [
        migrations.RunPython(add_century_codes, remove_century_codes)
    ]
